<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 自动扫描com..web 包下的@Controller标注的类控制器类 -->
    <context:component-scan base-package="com.huangdong.web" />

    <!--<mvc:annotation-driven/>-->

    <!--注册默认的注解处理-->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <!-- 静态资源的访问 -->
    <mvc:resources location="/kindeditor/plugins/baidumap/" mapping="/kindeditor/plugins/baidumap/**" />
    <mvc:resources location="/kindeditor/plugins/map/" mapping="/kindeditor/plugins/map/**" />
    <mvc:resources location="/kindeditor/plugins/template/html/" mapping="/kindeditor/plugins/template/html/**" />
    <!--<mvc:resources location="/plugins/" mapping="/plugins/**" />-->
    <!--&lt;!&ndash; 注册默认的注解处理 启动Spring MVC的注解功能，完成请求和注解POJO的映射 &ndash;&gt;-->


    <!--避免IE执行AJAX时,返回JSON出现下载文件-->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--注册自定义的方法注解处理-->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!--注册上面定义好的json转换器-->
               <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>


    </bean>

    <!-- 指定FreeMarker模板文件目录 -->
    <bean id="freemarkerConfig"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/app/ftl/" />
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">UTF-8</prop>
                <!--刷新模板的周期，单位为秒-->
                <prop key="template_update_delay">0</prop>
                <!--本地化设置-->
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
                <!--此属性可以防止模板解析空值时的错误-->
                <prop key="classic_compatible">true</prop>
            </props>
        </property>
    </bean>
    <bean id="freeMarkerViewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
        <!--查找对应下所有以ftl结尾的文件-->
        <property name="prefix" value="" />
        <property name="suffix" value=".ftl" />
        <property name="order" value="0"/>
        <property name="contentType" value="text/html; charset=UTF-8" />
    </bean>



    <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <!--如果使用的是UrlBasedViewResolver这种方式，这个就不能省，如果用的InternalResourceViewResolver方式就可以省-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <!-- 前缀，即视图所在的路径 ，放在web-inf下面是为了防止客户端直接通过jsp地址访问jsp页面，这样就不走springmvc了-->
        <property name="prefix" value="/WEB-INF/views/" />
        <!--指定视图解释器的优先级-->
        <property name="order" value="1"/>
        <property name="suffix" value=""/>
    </bean>




    <!--文件上传配置-->
        <bean id="multipartResolver"
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
            p:defaultEncoding="utf-8"
            p:maxInMemorySize="40960"
            p:maxUploadSize="10485760"/>

      <bean id="messageSource"
            class="org.springframework.context.support.ResourceBundleMessageSource"
            p:basenames="i18n/messages"/>

      <!--WEB异常解析处理-->
    <bean id="exceptionResolver" class="com.huangdong.web.ForumHandlerExceptionResolver">
        <property name="defaultErrorView" value="fail"/>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.RuntimeException">fail</prop>
            </props>
        </property>
    </bean>

    <!--定时任务的任务调度器相关配置-->
    <bean id="emailReceiverImp" class="com.huangdong.service.email.EmailReceiverImp">
    </bean>
    <!--1.声明调度器的调用对象和调用方法-->
    <bean id="projectTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="emailReceiverImp"/>
        </property>
        <property name="targetMethod">
            <value>subscribe</value>
        </property>
        <!--设置定时器支持并发-->
        <property name="concurrent" value="true"></property>
    </bean>
    <!--自动发送邮件 2.在quartz任务调度器定义触发时间Configure Triggers to be used in Quartz Scheduler-->
    <bean id="timeEmailSend" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="projectTask"/>
        </property>
        <!--cron表达式设置每个月1号上午8点推送邮件-->
        <property name="cronExpression">
            <value>0 0,8,0,0 * 1 * ?  </value>
        </property>
    </bean>

    <!--总调度用于启动定时器 3.在quartz任务调度器配置任务工厂Configure SchedulerFactoryBean that creates and configures Quartz Scheduler-->
    <bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails" ref="projectTask"/>
        <property name="triggers">
            <list>
                <ref bean="timeEmailSend"></ref>
            </list>
        </property>
    </bean>



    <!--配置Spring中的HttpMessageConverter-->
    <!--<util:list id="messageConverters">-->
    <!--<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>-->
    <!--<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>-->
    <!--<bean class="org.springframework.http.converter.StringHttpMessageConverter"/>-->
    <!--<bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter"/>-->
    <!--<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"-->
    <!--p:marshaller-ref="xmlMarshaller"-->
    <!--p:unmarshaller-ref="xmlMarshaller"/>-->
    <!--<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>-->
    <!--</util:list>-->
    <!--声明Marshaller,使用XStream技术-->
    <!--<bean id="xmlMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">-->
    <!--<property name="streamDriver">-->
    <!--&lt;!&ndash;使用STAX对xml进行处理，所占内存小，速度快&ndash;&gt;-->
    <!--<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>-->
    <!--</property>-->

    <!--<property name="annotatedClasses">-->
    <!--&lt;!&ndash;使用Xstream的注解 定义xml的转换规则，在下面的类里面使用该转换规则&ndash;&gt;-->
    <!--<list>-->
    <!--<value>com.huangdong.bean.User</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<bean id="conversion" class="org.springframework.context.support.ConversionServiceFactoryBean">-->
    <!--&lt;!&ndash;下面的参数列表指定自定义转换器类型&ndash;&gt;-->
    <!--<property name="converters">-->
    <!--&lt;!&ndash;<bean class="com.huangdong.util.MyCustomConverter"/>&ndash;&gt;-->
    <!--<bean class="com.huangdong.util.CustomConverter"/>-->
    <!--</property>-->
    <!--</bean>-->
    <!--装配上面自定义的Conversion-->
    <!--mvc:annotation-driven默认会创建并注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter实例 FormattingConversionFactoryBean-->
    <!--conversion-service="conversion" 及上下文相关的Bean会覆盖默认实现-->
    <!--<mvc:annotation-driven conversion-service="conversion"/>-->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">-->
    <!--<property name="webBindingInitializer">-->
    <!--<bean class="com.huangdong.util.MyBindingInitializer"/>-->
    <!--</property>-->
    <!--</bean>-->

</beans>
